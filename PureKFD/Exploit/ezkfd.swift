//
//  ezkfd.swift
//  PurityKFD
//
//  Created by Lrdsnow on 8/21/23.
//

import Foundation

func exploit(puaf_pages: UInt64, puaf_method: UInt64, kread_method: UInt64, kwrite_method: UInt64) {
    do_kopen(puaf_pages, puaf_method, kread_method, kwrite_method)
}

func close_exploit() {
    do_kclose()
}

func ez_overwriteFile(from: String, to: String) {
    if to.hasPrefix("/var") || to.hasPrefix("/private/var") {
        funVnodeOverwriteFileUnlimitSize(strdup(to)!, strdup(from)!)
    } else {
        funVnodeOverwrite2(strdup(to)!, strdup(from)!)
    }
}

func overwriteWithFileImpl(
    replacementURL: URL,
    pathToTargetFile: String
) {
        let cPathtoTargetFile = pathToTargetFile.withCString { ptr in
            return strdup(ptr)
        }
        
        let mutablecPathtoTargetFile = UnsafeMutablePointer<Int8>(mutating: cPathtoTargetFile)
        
        let cFileURL = replacementURL.path.withCString { ptr in
            return strdup(ptr)
        }
        let mutablecFileURL = UnsafeMutablePointer<Int8>(mutating: cFileURL)
        
        funVnodeOverwrite2(cPathtoTargetFile, mutablecFileURL) // the magic is here
}

func overwriteFile(at filePath: String, with newData: Data) throws {
    if FileManager.default.fileExists(atPath: URL.documents.appendingPathComponent("TempOverwriteFile").path) {
        try? FileManager.default.removeItem(at: URL.documents.appendingPathComponent("TempOverwriteFile"))
    }
    try newData.write(to: URL.documents.appendingPathComponent("TempOverwriteFile"))
    overwriteWithFileImpl(replacementURL: URL.documents.appendingPathComponent("TempOverwriteFile"), pathToTargetFile: filePath)
}
